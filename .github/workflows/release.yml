name: Release

on:
  push:
    tags:
    - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      app_version: ${{ steps.define_version.outputs.app_version }}
    steps:
      - name: Define version
        id: define_version
        run: |
          APP_VERSION=${GITHUB_REF/refs\/tags\/v/}
          echo "Tag: $GITHUB_REF Version = $APP_VERSION"
          echo "::set-output name=app_version::$APP_VERSION"          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  linux-jpackage:
    runs-on: ubuntu-18.04
    needs: create-release
    steps:
      - uses: actions/checkout@v2

      - name: Make staging directory
        run: |
          mkdir staging

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and package
        run: mvn clean package

      - name: Create Bundle using jpackage
        id: outputfile
        run: |
          .github/scripts/build_app_linux.sh \
          --type deb
          mv target/installer/*.deb staging/BatterySim-${{ env.APP_VERSION }}.deb
          echo ::set-output name=pathDeb::staging/BatterySim-${{ env.APP_VERSION }}.deb
          .github/scripts/build_app_linux.sh \
          --type rpm
          mv target/installer/*.rpm staging/BatterySim-${{ env.APP_VERSION }}.rpm
          echo ::set-output name=pathRpm::staging/BatterySim-${{ env.APP_VERSION }}.rpm
        env:
          APP_VERSION: ${{needs.create-release.outputs.app_version}}

      - name: Upload installer (deb)
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageLinux (deb)
          path: ${{ steps.outputfile.outputs.pathDeb }}

      - name: Upload installer (rpm)
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageLinux (rpm)
          path: ${{ steps.outputfile.outputs.pathRpm }}

      - name: Upload Release Asset (deb)
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: ${{ steps.outputfile.outputs.pathDeb }}
          asset_name: BatterySim-linux-${{needs.create-release.outputs.app_version}}.deb
          asset_content_type: application/zip       

      - name: Upload Release Asset (rpm)
        id: upload-release-asset-rpm 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: ${{ steps.outputfile.outputs.pathRpm }}
          asset_name: BatterySim-linux-${{needs.create-release.outputs.app_version}}.rpm
          asset_content_type: application/zip                    


  macos-jpackage:
    runs-on: macos-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v2

      - name: Make staging directory
        run: mkdir staging

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}

      - name: Build and package
        run: mvn clean package

      - name: Create Bundle using jpackage
        id: outputfile
        run: |
          .github/scripts/build_app_mac.sh \
          --mac-package-signing-prefix "$GLUON_MACSIGN_PREFIX" \
          --mac-signing-key-user-name "$GLUON_MACSIGN_USER" \
          --mac-sign          
          echo ::set-output name=path::target/installer/BatterySim-${{ env.APP_VERSION }}.pkg
        env:
          GLUON_MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
          GLUON_MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
          APP_VERSION: ${{needs.create-release.outputs.app_version}}

      - name: Notarize Installer
        uses: erwin1/xcode-notarize@main
        with:
          product-path: ${{ steps.outputfile.outputs.path }}
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          primary-bundle-id: io.github.erwin1.batterysim
          asc-provider: ${{ secrets.GLUON_MACSIGN_PREFIX }}
          verbose: false

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageMac
          path: ${{ steps.outputfile.outputs.path }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: ${{ steps.outputfile.outputs.path }}
          asset_name: BatterySim-macos-${{needs.create-release.outputs.app_version}}.pkg
          asset_content_type: application/zip

  windows-jpackage:
    runs-on: windows-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v1

      - name: Make staging directory
        run: mkdir staging

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and package
        run: mvn clean package

      - name: Create Bundle using jpackage
        id: outputfile
        shell: cmd
        run: |
          call .github\scripts\build_app_windows.bat
          echo ::set-output name=path::target\installer\BatterySim-${{ env.APP_VERSION }}.msi
        env:
          APP_VERSION: ${{needs.create-release.outputs.app_version}}

      - name: Codesign
        uses: erwin1/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_CERTIFICATE }}'
          password: '${{ secrets.WINDOWS_PASSWORD }}'
          certificatename: '${{ secrets.WINDOWS_CERTNAME }}'
          folder: 'target/installer'

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageWindows
          path: ${{ steps.outputfile.outputs.path }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create-release.outputs.upload_url}}
          asset_path: ${{ steps.outputfile.outputs.path }}
          asset_name: BatterySim-windows-${{needs.create-release.outputs.app_version}}.msi
          asset_content_type: application/zip                

